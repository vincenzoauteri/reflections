What happens when you initialize a repository? Why do you need to do it?

    Git creates the repository in the directory specified. It creates hidden 
    files that forms the structure and hold the configuration of the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
    
    The staging area allow us to prepare a commit before actually doing it, allowing
    to select the files we are interested instead of the whole directory. After 
    a commit, it reflects the status of the project to date, and it is useful to
    review the changes from our local files before adding them.

How can you use the staging area to make sure you have one commit per logical
change?

    I can add files from the working directory to the stagine area selectievly
    and commit only the set of files representing one logical change. If I have
    more local changes, I can decide to do commits in different stages.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    For example when adding a new feature, or refactoring old code, so that the
    main branch is not affected. Different branches can be merged eventually if
    required. It also allows working in parallel on the same project.

How do the diagrams help you visualize the branch structure?

    Diagrams give a summary of the evolution of the projects, where branches
    were done, how they relate to each other, which commits are shared and 
    unreacheable ones.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
